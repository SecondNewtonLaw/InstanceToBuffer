[{"title":"TableToBuffer","type":0,"sectionRef":"#","url":"/TableToBuffer/api/TableToBuffer","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"TableToBuffer","url":"/TableToBuffer/api/TableToBuffer#functions","content":" "},{"title":"GetSerializerForTable​","type":1,"pageTitle":"TableToBuffer","url":"/TableToBuffer/api/TableToBuffer#GetSerializerForTable","content":"&lt;/&gt; TableToBuffer.GetSerializerForTable( t: T-- The table to make a binary serializer for ) → Serializer&lt;T&gt;-- A serializer that can make the given table into a buffer Automatically creates a binary serializer for a given table. Only string-keyed tables are allowed. "},{"title":"Errors","type":1,"pageTitle":"TableToBuffer","url":"/TableToBuffer/api/TableToBuffer##","content":"Type\tDescription&quot;This function only accepts tables&quot; when argument t is not a table &quot;Only maps of { [string]: boolean | number | string | table | vector (Vector3) | buffer } are supported. Mixed tables are not supported, neither are arrays.&quot; When the given map contains keys that are not only strings or contains non-primitive data types as values.\t  "},{"title":"TableAsBuffer​","type":1,"pageTitle":"TableToBuffer","url":"/TableToBuffer/api/TableToBuffer#TableAsBuffer","content":"&lt;/&gt; TableToBuffer.TableAsBuffer( tbl: T-- The table to represent as a buffer. ) → T-- A table with its __index metatable modified so that indexes access the buffer to write and read data. Generates a buffer for a given table. This will cause the table to be just a metatable into the buffer. Making all the data inside the buffer, and the table just a way to mutate it. "},{"title":"Errors","type":1,"pageTitle":"TableToBuffer","url":"/TableToBuffer/api/TableToBuffer##","content":"Type\tDescription&quot;This function does not support arrays or mixed tables.&quot;\tThe table can only contain strings.  "},{"title":"GetDeserializerBuilder​","type":1,"pageTitle":"TableToBuffer","url":"/TableToBuffer/api/TableToBuffer#GetDeserializerBuilder","content":"&lt;/&gt; TableToBuffer.GetDeserializerBuilder() → SerializerBuilder-- A builder that allows you to create a Serializable using a builder-style API Gets a Serializer/Deserializer builder. "},{"title":"Serializer","type":0,"sectionRef":"#","url":"/TableToBuffer/api/Serializer","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Serializer","url":"/TableToBuffer/api/Serializer#functions","content":" "},{"title":"Deserialize​","type":1,"pageTitle":"Serializer","url":"/TableToBuffer/api/Serializer#Deserialize","content":"&lt;/&gt; Serializer.Deserialize(buf: buffer) → T-- The deserialized result Deserializes the given buffer into a table. "},{"title":"Errors","type":1,"pageTitle":"Serializer","url":"/TableToBuffer/api/Serializer##","content":"Type\tDescription&quot;Buffer cannot be deserialized: Wrong size&quot;\tThe given buffer is not the size that the Serializer predicts it to be.  "},{"title":"Serialize​","type":1,"pageTitle":"Serializer","url":"/TableToBuffer/api/Serializer#Serialize","content":"&lt;/&gt; Serializer.Serialize( obj: T-- The table to convert into a buffer ) → {Action}-- Array of type Action describing how to serialize the table into a buffer Serializes the table into a buffer "},{"title":"Errors","type":1,"pageTitle":"Serializer","url":"/TableToBuffer/api/Serializer##","content":"Type\tDescription&quot;Attempted to write a value of type 'X' when the serializer action that serializes parameter 'index_of_table_being_serialized' expects a type that fits the description of a Z&quot;\tHappens when the serializer attempts to write the wrong type using the wrong write operation. Caused by malformed tables "},{"title":"SerializerBuilder","type":0,"sectionRef":"#","url":"/TableToBuffer/api/SerializerBuilder","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"SerializerBuilder","url":"/TableToBuffer/api/SerializerBuilder#functions","content":" "},{"title":"uint32WithName​","type":1,"pageTitle":"SerializerBuilder","url":"/TableToBuffer/api/SerializerBuilder#uint32WithName","content":"&lt;/&gt; SerializerBuilder.uint32WithName( valueName: string-- The index that this uint32 will have when it is deserialized into a table. ) → SerializerBuilder-- The builder instance. Inserts an action to the deserializer action list, which indicates it to read 4 bytes and treat the return as an unsigned 32 bit integer.  "},{"title":"uint16WithName​","type":1,"pageTitle":"SerializerBuilder","url":"/TableToBuffer/api/SerializerBuilder#uint16WithName","content":"&lt;/&gt; SerializerBuilder.uint16WithName( valueName: string-- The index that this uint16 will have when it is deserialized into a table. ) → SerializerBuilder-- The builder instance. Inserts an action to the deserializer action list, which indicates it to read 2 bytes and treat the return as an unsigned 16 bit integer.  "},{"title":"uint8WithName​","type":1,"pageTitle":"SerializerBuilder","url":"/TableToBuffer/api/SerializerBuilder#uint8WithName","content":"&lt;/&gt; SerializerBuilder.uint8WithName( valueName: string-- The index that this uint8 will have when it is deserialized into a table. ) → SerializerBuilder-- The builder instance. Inserts an action to the deserializer action list, which indicates it to read 1 byte and treat the return as an unsigned 8 bit integer.  "},{"title":"int32WithName​","type":1,"pageTitle":"SerializerBuilder","url":"/TableToBuffer/api/SerializerBuilder#int32WithName","content":"&lt;/&gt; SerializerBuilder.int32WithName( valueName: string-- The index that this int32 will have when it is deserialized into a table. ) → SerializerBuilder-- The builder instance. Inserts an action to the deserializer action list, which indicates it to read 4 bytes and treat the return as an signed 32 bit integer.  "},{"title":"int16WithName​","type":1,"pageTitle":"SerializerBuilder","url":"/TableToBuffer/api/SerializerBuilder#int16WithName","content":"&lt;/&gt; SerializerBuilder.int16WithName( valueName: string-- The index that this int16 will have when it is deserialized into a table. ) → SerializerBuilder-- The builder instance. Inserts an action to the deserializer action list, which indicates it to read 2 bytes and treat the return as an signed 16 bit integer.  "},{"title":"int8WithName​","type":1,"pageTitle":"SerializerBuilder","url":"/TableToBuffer/api/SerializerBuilder#int8WithName","content":"&lt;/&gt; SerializerBuilder.int8WithName( valueName: string-- The index that this int8 will have when it is deserialized into a table. ) → SerializerBuilder-- The builder instance. Inserts an action to the deserializer action list, which indicates it to read 1 byte and treat the return as an signed 8 bit integer.  "},{"title":"floatWithName​","type":1,"pageTitle":"SerializerBuilder","url":"/TableToBuffer/api/SerializerBuilder#floatWithName","content":"&lt;/&gt; SerializerBuilder.floatWithName( valueName: string-- The index that this float32 will have when it is deserialized into a table. ) → SerializerBuilder-- The builder instance. Inserts an action to the deserializer action list, which indicates it to read 4 bytes and to treat the return as a IEEE-754 single-precision floating point number.  "},{"title":"doubleWithName​","type":1,"pageTitle":"SerializerBuilder","url":"/TableToBuffer/api/SerializerBuilder#doubleWithName","content":"&lt;/&gt; SerializerBuilder.doubleWithName( valueName: string-- The index that this double/float64 will have when it is deserialized into a table. ) → SerializerBuilder-- The builder instance. Inserts an action to the deserializer action list, which indicates it to read 8 bytes and to treat the return as a IEEE-754 double-precision floating point number.  "},{"title":"stringWithName​","type":1,"pageTitle":"SerializerBuilder","url":"/TableToBuffer/api/SerializerBuilder#stringWithName","content":"&lt;/&gt; SerializerBuilder.stringWithName( valueName: string,-- The index that this string will have when it is deserialized into a table. maxStringSize: number-- The length of the string, used to cap buffers from becoming too big. ) → SerializerBuilder-- The builder instance. Inserts an action to the deserializer action list, which indicates it to read an arbitrary amount bytes and to treat the return as a string. The size of the string is placed four bytes before the string as an int32. "},{"title":"Errors","type":1,"pageTitle":"SerializerBuilder","url":"/TableToBuffer/api/SerializerBuilder##","content":"Type\tDescription&quot;maxStringSize must be a number&quot;\tHappens when maxStringSize is not of type number. &quot;maxStringSize is too big, serializer will not continue&quot;\tHappens when maxSizeString exceeds 1025.  "},{"title":"booleanWithName​","type":1,"pageTitle":"SerializerBuilder","url":"/TableToBuffer/api/SerializerBuilder#booleanWithName","content":"&lt;/&gt; SerializerBuilder.booleanWithName( valueName: string-- The index that this boolean will have when it is deserialized into a table. ) → SerializerBuilder-- The builder instance. Inserts an action to the deserializer action list, which indicates it to read 1 byte and to treat the return as a boolean.  "},{"title":"vectorWithName​","type":1,"pageTitle":"SerializerBuilder","url":"/TableToBuffer/api/SerializerBuilder#vectorWithName","content":"&lt;/&gt; SerializerBuilder.vectorWithName( valueName: string-- The index that this vector will have when it is deserialized into a table. ) → SerializerBuilder-- The builder instance. Inserts an action to the deserializer action list, which will indicate it to read three IEEE-754 double-precision floating point numbers, representing X, Y and Z for a Vector3.  "},{"title":"tableWithName​","type":1,"pageTitle":"SerializerBuilder","url":"/TableToBuffer/api/SerializerBuilder#tableWithName","content":"&lt;/&gt; SerializerBuilder.tableWithName( valueName: string,-- The index that this table will have when it is deserialized into a table. tableSerializer: Serializer&lt;U&gt;-- The serializer that the table will use when being turned from a buffer into a table and vice-versa. ) → SerializerBuilder-- The builder instance. Inserts an action to the deserializer action list, which will indicate it to read an aribitrary amount of bytes determined by the table serializer, and to then feed that into the given serializer to craft the table.  "},{"title":"bufferWithName​","type":1,"pageTitle":"SerializerBuilder","url":"/TableToBuffer/api/SerializerBuilder#bufferWithName","content":"&lt;/&gt; SerializerBuilder.bufferWithName( valueName: string,-- The index that this buffer will have when it is deserialized into a table. bufSize: number?-- The size the buffer will have. If not specified, the size will be of 0x1000, or 4096 bytes. ) → SerializerBuilder-- The builder instance. Inserts an action to the deserializer action list, which will read the given number of bytes, then it will copy those bytes into a new buffer. "}]